/// Builds ``SQLUnion`` queries.
public final class SQLUnionBuilder: SQLQueryBuilder, SQLQueryFetcher, SQLPartialResultBuilder {
    /// The ``SQLUnion`` being built.
    public var union: SQLUnion

    /// See ``SQLQueryBuilder/database``.
    public var database: any SQLDatabase

    /// See ``SQLQueryBuilder/query``.
    @inlinable
    public var query: any SQLExpression {
        self.union
    }

    /// Create a new ``SQLUnionBuilder``.
    @inlinable
    public init(on database: any SQLDatabase, initialQuery: SQLSelect) {
        self.union = .init(initialQuery: initialQuery)
        self.database = database
    }

    /// Add a query to the union in `UNION DISTINCT` mode
    /// (all results from both queries are returned, with duplicates removed).
    @inlinable
    public func union(distinct query: SQLSelect) -> Self {
       self.union.add(query, joiner: .init(type: .union))
       return self
    }

    /// Add a query to the union in `UNION ALL` mode
    /// (all results from both queries are returned, with duplicates preserved).
    @inlinable
    public func union(all query: SQLSelect) -> Self {
       self.union.add(query, joiner: .init(type: .unionAll))
       return self
    }

    /// Add a query to the union in `INTERSECT DISTINCT` mode
    /// (only results that come from both queries are returned, with duplicates removed).
    @inlinable
    public func intersect(distinct query: SQLSelect) -> Self {
        self.union.add(query, joiner: .init(type: .intersect))
       return self
    }

    /// Add a query to the union in `INTERSECT ALL` mode
    /// (only results that come from both queries are returned, with duplicates preserved).
    @inlinable
    public func intersect(all query: SQLSelect) -> Self {
        self.union.add(query, joiner: .init(type: .intersectAll))
       return self
    }

    /// Add a query to the union in `EXCEPT DISTINCT` mode
    /// (only results that come from the left query but not the right are returned, with duplicates removed).
    @inlinable
    public func except(distinct query: SQLSelect) -> Self {
        self.union.add(query, joiner: .init(type: .except))
       return self
    }

    /// Add a query to the union in `EXCEPT ALL` mode
    /// (only results that come from both queries are returned, with duplicates preserved).
    @inlinable
    public func except(all query: SQLSelect) -> Self {
        self.union.add(query, joiner: .init(type: .exceptAll))
       return self
    }
}

extension SQLUnionBuilder {
    /// See ``SQLPartialResultBuilder/orderBys``.
    @inlinable
    public var orderBys: [any SQLExpression] {
        get { self.union.orderBys }
        set { self.union.orderBys = newValue }
    }
    
    /// See ``SQLPartialResultBuilder/limit``.
    @inlinable
    public var limit: Int? {
        get { self.union.limit }
        set { self.union.limit = newValue }
    }
    
    /// See ``SQLPartialResultBuilder/offset``.
    @inlinable
    public var offset: Int? {
        get { self.union.offset }
        set { self.union.offset = newValue }
    }
}

extension SQLDatabase {
    /// Create a new ``SQLUnionBuilder``, providing a builder to create the first query.
    @inlinable
    public func union(_ predicate: (SQLSelectBuilder) throws -> SQLSelectBuilder) rethrows -> SQLUnionBuilder {
        .init(on: self, initialQuery: try predicate(.init(on: self)).select)
    }
}

extension SQLUnionBuilder {
    /// Call ``union(distinct:)-6q90v`` with a query generated by a builder.
    @inlinable
    public func union(distinct predicate: (SQLSelectBuilder) throws -> SQLSelectBuilder) rethrows -> Self {
        try self.union(distinct: predicate(.init(on: self.database)).select)
    }

    /// Call ``union(all:)-76ei4`` with a query generated by a builder.
    @inlinable
    public func union(all predicate: (SQLSelectBuilder) throws -> SQLSelectBuilder) rethrows -> Self {
        try self.union(all: predicate(.init(on: self.database)).select)
    }

    /// Alias ``union(distinct:)-79krl`` so it acts as the "default".
    @inlinable
    public func union(_ predicate: (SQLSelectBuilder) throws -> SQLSelectBuilder) rethrows -> Self {
        try self.union(distinct: predicate)
    }

    /// Call ``intersect(distinct:)-1i7fc`` with a query generated by a builder.
    @inlinable
    public func intersect(distinct predicate: (SQLSelectBuilder) throws -> SQLSelectBuilder) rethrows -> Self {
        try self.intersect(distinct: predicate(.init(on: self.database)).select)
    }

    /// Call ``intersect(all:)-5r4e9`` with a query generated by a builder.
    @inlinable
    public func intersect(all predicate: (SQLSelectBuilder) throws -> SQLSelectBuilder) rethrows -> Self {
        try self.intersect(all: predicate(.init(on: self.database)).select)
    }

    /// Alias ``intersect(distinct:)-3t74e`` so it acts as the "default".
    @inlinable
    public func intersect(_ predicate: (SQLSelectBuilder) throws -> SQLSelectBuilder) rethrows -> Self {
        try self.intersect(distinct: predicate)
    }

    /// Call ``except(distinct:)-8pdro`` with a query generated by a builder.
    @inlinable
    public func except(distinct predicate: (SQLSelectBuilder) throws -> SQLSelectBuilder) rethrows -> Self {
        try self.except(distinct: predicate(.init(on: self.database)).select)
    }

    /// Call ``except(all:)-3i25o`` with a query generated by a builder.
    @inlinable
    public func except(all predicate: (SQLSelectBuilder) throws -> SQLSelectBuilder) rethrows -> Self {
        try self.except(all: predicate(.init(on: self.database)).select)
    }

    /// Alias ``except(distinct:)-2xe8f`` so it acts as the "default".
    @inlinable
    public func except(_ predicate: (SQLSelectBuilder) throws -> SQLSelectBuilder) rethrows -> Self {
        try self.except(distinct: predicate)
    }
}

extension SQLSelectBuilder {
    /// See ``SQLUnionBuilder/union(distinct:)-79krl``.
    @inlinable
    public func union(distinct predicate: (SQLSelectBuilder) throws -> SQLSelectBuilder) rethrows -> SQLUnionBuilder {
        try .init(on: self.database, initialQuery: self.select).union(distinct: predicate)
    }

    /// See ``SQLUnionBuilder/union(all:)-8lkyh``.
    @inlinable
    public func union(all predicate: (SQLSelectBuilder) throws -> SQLSelectBuilder) rethrows -> SQLUnionBuilder {
        try .init(on: self.database, initialQuery: self.select).union(all: predicate)
    }

    /// See ``SQLUnionBuilder/union(_:)``.
    @inlinable
    public func union(_ predicate: (SQLSelectBuilder) throws -> SQLSelectBuilder) rethrows -> SQLUnionBuilder {
        try self.union(distinct: predicate)
    }

    /// See ``SQLUnionBuilder/intersect(distinct:)-15945``.
    @inlinable
    public func intersect(distinct predicate: (SQLSelectBuilder) throws -> SQLSelectBuilder) rethrows -> SQLUnionBuilder {
        try .init(on: self.database, initialQuery: self.select).intersect(distinct: predicate)
    }

    /// See ``SQLUnionBuilder/intersect(all:)-8i8ic``.
    @inlinable
    public func intersect(all predicate: (SQLSelectBuilder) throws -> SQLSelectBuilder) rethrows -> SQLUnionBuilder {
        try .init(on: self.database, initialQuery: self.select).intersect(all: predicate)
    }

    /// See ``SQLUnionBuilder/intersect(_:)``.
    @inlinable
    public func intersect(_ predicate: (SQLSelectBuilder) throws -> SQLSelectBuilder) rethrows -> SQLUnionBuilder {
        try self.intersect(distinct: predicate)
    }

    /// See ``SQLUnionBuilder/except(distinct:)-2m81r``.
    @inlinable
    public func except(distinct predicate: (SQLSelectBuilder) throws -> SQLSelectBuilder) rethrows -> SQLUnionBuilder {
        try .init(on: self.database, initialQuery: self.select).except(distinct: predicate)
    }

    /// See ``SQLUnionBuilder/except(all:)-16hlm``.
    @inlinable
    public func except(all predicate: (SQLSelectBuilder) throws -> SQLSelectBuilder) rethrows -> SQLUnionBuilder {
        try .init(on: self.database, initialQuery: self.select).except(all: predicate)
    }

    /// See ``SQLUnionBuilder/except(_:)``.
    @inlinable
    public func except(_ predicate: (SQLSelectBuilder) throws -> SQLSelectBuilder) rethrows -> SQLUnionBuilder {
        try self.except(distinct: predicate)
    }
}
